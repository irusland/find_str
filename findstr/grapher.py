from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plot
import numpy as np
from chronograph import *
from textgen import *
from finder import *
import time


def points_to_2darrays(tuples3d, t_size, p_size, parts_count):
    p_base = -1
    x, y, z, = [], [], []
    count = 0
    for tuple in tuples3d:
        for t_size, p_size, time in tuple:
            if p_size != p_base:
                x.append([])
                y.append([])
                z.append([])
            x[count].append(t_size)
            y[count].append(p_size)
            z[count].append(time)
            count += 1
    X, Y = (np.array(x), np.array(y))
    Z = np.array(z)
    return X, Y, Z


a = time.time()

# brute_points = []
# hash_linear_points = []
# hash_quad_points = []
# hash_rk_points = []
# automate_points = []
bm_points = []
kmp_points = []
for i in range(1, 11):
    text_size = 1000000
    pattern_size = i
    part_count = 10
    text, pattern = Textgen('text.txt').generate(text_size, pattern_size)
    print(f'{text_size} x {pattern_size} - processing')
#     brute_points.append(
#         Chronograph(BruteForce).measure_text_parts(text, pattern, part_count))
#     hash_linear_points.append(
#         Chronograph(Hash, Hash.Linear).measure_text_parts(
#             text, pattern, part_count))
#     hash_quad_points.append(
#         Chronograph(Hash, Hash.Quad).measure_text_parts(
#             text, pattern, part_count))
#     hash_rk_points.append(
#         Chronograph(Hash, Hash.RabinKarph).measure_text_parts(
#             text, pattern, part_count))
#     automate_points.append(
#         Chronograph(Automate).measure_text_parts(text, pattern, part_count))
    bm_points.append(
        Chronograph(BoyerMoore).measure_text_parts(text, pattern, part_count))
#     kmp_points.append(
#         Chronograph(KMP).measure_text_parts(text, pattern, part_count))

figure = plot.figure('Brute Force')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
brute_points = [[(20, 1, 1.3939526918900542e-05), (30, 1, 2.2165255997363453e-05), (40, 1, 3.0304506256387567e-05), (50, 1, 3.873569364593643e-05), (60, 1, 4.6865097578756245e-05), (70, 1, 5.490502777255823e-05), (80, 1, 6.30860141886664e-05), (90, 1, 7.137913925949063e-05), (100, 1, 7.991335416785744e-05)], [(20, 2, 1.2668390836998846e-05), (30, 2, 2.060997614240301e-05), (40, 2, 2.8722423594922397e-05), (50, 2, 3.678351531278756e-05), (60, 2, 4.479515366869084e-05), (70, 2, 5.293724526845874e-05), (80, 2, 6.110345458708248e-05), (90, 2, 6.929282013172378e-05), (100, 2, 7.733836076202141e-05)], [(20, 3, 1.1848393692696257e-05), (30, 3, 1.9798506307428853e-05), (40, 3, 2.7881297134182628e-05), (50, 3, 3.5972452830496225e-05), (60, 3, 4.396020228676065e-05), (70, 3, 5.216596077899544e-05), (80, 3, 6.0266181425303487e-05), (90, 3, 6.941815833772282e-05), (100, 3, 7.905784604068632e-05)], [(20, 4, 1.1247433417197525e-05), (30, 4, 1.9393679252049388e-05), (40, 4, 2.7280055768107397e-05), (50, 4, 3.745920751136698e-05), (60, 4, 4.5236944252027e-05), (70, 4, 5.369159207579341e-05), (80, 4, 6.126609515225133e-05), (90, 4, 6.827355816757611e-05), (100, 4, 7.786236246338792e-05)], [(20, 5, 1.0497360496808321e-05), (30, 5, 1.893633959774441e-05), (40, 5, 2.8159855206763116e-05), (50, 5, 3.708382265283427e-05), (60, 5, 4.508895184817554e-05), (70, 5, 5.438462812073377e-05), (80, 5, 6.077645242668824e-05), (90, 5, 6.87827421470616e-05), (100, 5, 7.684830296246303e-05)], [(20, 6, 9.437280936470208e-06), (30, 6, 1.8503267157641447e-05), (40, 6, 2.698831956675648e-05), (50, 6, 3.5114109978847463e-05), (60, 6, 4.332779510778556e-05), (70, 6, 5.1673967011120855e-05), (80, 6, 5.988792215905196e-05), (90, 6, 6.839020808420663e-05), (100, 6, 7.621706280986733e-05)], [(20, 7, 8.681185143091756e-06), (30, 7, 1.6670049040676608e-05), (40, 7, 2.4811659325094338e-05), (50, 7, 3.4644098429836604e-05), (60, 7, 4.381557219250575e-05), (70, 7, 5.0624806070254864e-05), (80, 7, 6.0392929139489286e-05), (90, 7, 6.806777498741319e-05), (100, 7, 7.442134974899842e-05)], [(20, 8, 7.84785944163503e-06), (30, 8, 1.6144095867607384e-05), (40, 8, 2.4554845586396424e-05), (50, 8, 3.2751671251667e-05), (60, 8, 4.1096352611834135e-05), (70, 8, 4.931126424942028e-05), (80, 8, 5.815997681554427e-05), (90, 8, 6.814184240983259e-05), (100, 8, 7.848172772427552e-05)], [(20, 9, 7.13952096200318e-06), (30, 9, 1.5067450431736775e-05), (40, 9, 2.372252072279106e-05), (50, 9, 3.172996782179738e-05), (60, 9, 3.947369255138263e-05), (70, 9, 4.706486842736385e-05), (80, 9, 5.5482620193215884e-05), (90, 9, 6.757198431240484e-05), (100, 9, 7.508488508839957e-05)], [(20, 10, 6.564365104733348e-06), (30, 10, 1.5123755656229651e-05), (40, 10, 2.391848507195717e-05), (50, 10, 3.1770332380408775e-05), (60, 10, 4.128655613575746e-05), (70, 10, 4.876619447129073e-05), (80, 10, 5.856673021678533e-05), (90, 10, 6.68032472310517e-05), (100, 10, 7.704955423133777e-05)]]
x, y, z = points_to_2darrays(brute_points, 100, 10, 10)
ax.scatter(x, y, z)


figure = plot.figure('Hash linear')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
hash_linear_points = [[(20, 1, 2.5327730613409206e-05), (30, 1, 4.398234890412559e-05), (40, 1, 5.979687415754441e-05), (50, 1, 7.670033700190207e-05), (60, 1, 9.226406826062149e-05), (70, 1, 0.00010938296567526639), (80, 1, 0.00012502525082271553), (90, 1, 0.00014420398030380284), (100, 1, 0.0001600493795048215)], [(20, 2, 2.3892150219125836e-05), (30, 2, 4.003527912585139e-05), (40, 2, 5.6327744268657336e-05), (50, 2, 7.291889816123195e-05), (60, 2, 8.930058385762248e-05), (70, 2, 0.00010561838724335474), (80, 2, 0.00012164519413660258), (90, 2, 0.00013776068528213904), (100, 2, 0.000154623552063891)], [(20, 3, 2.5030895080553237e-05), (30, 3, 4.159392244461365e-05), (40, 3, 5.808324377464361e-05), (50, 3, 7.519487416077233e-05), (60, 3, 9.164034760768475e-05), (70, 3, 0.00010872793604480691), (80, 3, 0.00012518456719053073), (90, 3, 0.00014160197742919242), (100, 3, 0.00016044861826382595)], [(20, 4, 2.1906359399445914e-05), (30, 4, 3.849380627476037e-05), (40, 4, 5.496107714270857e-05), (50, 4, 7.463567625216353e-05), (60, 4, 9.143288621288282e-05), (70, 4, 0.00010795291421324333), (80, 4, 0.00012480366781892504), (90, 4, 0.000142020021904698), (100, 4, 0.00015806768838382557)], [(20, 5, 2.069795739624294e-05), (30, 5, 3.740512611067744e-05), (40, 5, 5.3942998926366646e-05), (50, 5, 7.251758248575272e-05), (60, 5, 9.064085505872872e-05), (70, 5, 0.00010697246291870363), (80, 5, 0.0001238058046246668), (90, 5, 0.00014143405915911027), (100, 5, 0.00015809039336900873)], [(20, 6, 1.946180503017175e-05), (30, 6, 3.617273134244147e-05), (40, 6, 5.2851864342277425e-05), (50, 6, 7.183354935148353e-05), (60, 6, 8.876810662273991e-05), (70, 6, 0.00010501295018344808), (80, 6, 0.00012183879497944334), (90, 6, 0.00013808204661647282), (100, 6, 0.0001552578703751309)], [(20, 7, 1.8449610592259163e-05), (30, 7, 3.516720517104597e-05), (40, 7, 5.263700155152412e-05), (50, 7, 7.278269317181305e-05), (60, 7, 8.965080676204223e-05), (70, 7, 0.00010618675321568775), (80, 7, 0.00012312357140916724), (90, 7, 0.00014030071071074985), (100, 7, 0.00015630619966174134)], [(20, 8, 1.725079538084648e-05), (30, 8, 3.510412088535549e-05), (40, 8, 5.141864964905343e-05), (50, 8, 6.790183815003463e-05), (60, 8, 8.458687419577628e-05), (70, 8, 0.00010091015151687912), (80, 8, 0.00011776717793329088), (90, 8, 0.00013708540135409788), (100, 8, 0.000153657603004391)], [(20, 9, 1.601459964793113e-05), (30, 9, 3.396544351030615e-05), (40, 9, 5.062509556205905e-05), (50, 9, 6.727715052507809e-05), (60, 9, 8.373752078714357e-05), (70, 9, 0.00010035424138231112), (80, 9, 0.00011676518140772956), (90, 9, 0.00013359228161111594), (100, 9, 0.0001503191959919616)], [(20, 10, 1.4662932157815757e-05), (30, 10, 3.518596943852342e-05), (40, 10, 5.160665961839098e-05), (50, 10, 6.834011199623847e-05), (60, 10, 8.506813495656458e-05), (70, 10, 0.00010128022204320825), (80, 10, 0.00011786798268619395), (90, 10, 0.0001344717831250681), (100, 10, 0.00015113528112988166)]]
x, y, z = points_to_2darrays(hash_linear_points, 100, 10, 10)
ax.scatter(x, y, z)

figure = plot.figure('Hash quad')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
hash_quad_points = [[(20, 1, 3.15853118316214e-05), (30, 1, 5.7287770335401495e-05), (40, 1, 8.076380573176729e-05), (50, 1, 0.0001044653990231199), (60, 1, 0.00012442309558426744), (70, 1, 0.0001456365009994019), (80, 1, 0.0001637177779338509), (90, 1, 0.00018598037766355975), (100, 1, 0.00021036185230082809)], [(20, 2, 3.094158328632131e-05), (30, 2, 5.269412608885702e-05), (40, 2, 7.646638962063554e-05), (50, 2, 0.00010005653601440406), (60, 2, 0.00012077357070113914), (70, 2, 0.0001484531706794518), (80, 2, 0.0001691314119374339), (90, 2, 0.00018998640719975266), (100, 2, 0.00021286905995727257)], [(20, 3, 2.8210088066841762e-05), (30, 3, 5.025123917081163e-05), (40, 3, 7.318776153161434e-05), (50, 3, 9.468117422082571e-05), (60, 3, 0.00011772345953177862), (70, 3, 0.00014022171097313797), (80, 3, 0.00015977140953055689), (90, 3, 0.00018349466372449542), (100, 3, 0.00020620767438449318)], [(20, 4, 2.6808811248251235e-05), (30, 4, 4.8110800151350964e-05), (40, 4, 6.946089929964247e-05), (50, 4, 9.077810252610988e-05), (60, 4, 0.00011452484540392927), (70, 4, 0.00013735651487280966), (80, 4, 0.00015901199428856365), (90, 4, 0.00017967984125126196), (100, 4, 0.00020174794932713652)], [(20, 5, 2.5674700736999512e-05), (30, 5, 4.712160519069618e-05), (40, 5, 6.869911988364042e-05), (50, 5, 8.979583790984228e-05), (60, 5, 0.00011116238020632101), (70, 5, 0.0001330044997233502), (80, 5, 0.00015479672597032713), (90, 5, 0.00017601685631519383), (100, 5, 0.00019672040497009763)], [(20, 6, 2.46184320984332e-05), (30, 6, 4.60507149935369e-05), (40, 6, 6.971280070296788e-05), (50, 6, 9.132352105996708e-05), (60, 6, 0.00011252508605646786), (70, 6, 0.00013398931004294994), (80, 6, 0.0001551456101943834), (90, 6, 0.0001760547785974702), (100, 6, 0.00019888356138428356)], [(20, 7, 2.5264255689677236e-05), (30, 7, 4.7043073323448526e-05), (40, 7, 7.022724584927885e-05), (50, 7, 8.989258084717541e-05), (60, 7, 0.00011412383096727123), (70, 7, 0.00013492900629106196), (80, 7, 0.00015696530443180018), (90, 7, 0.0009499045087903943), (100, 7, 0.0013281141008649553)], [(20, 8, 0.00011400307221632577), (30, 8, 0.0002656102676669467), (40, 8, 0.0004116628627584438), (50, 8, 0.0005648594584926138), (60, 8, 0.0007205201679105637), (70, 8, 0.0008683101518160211), (80, 8, 0.001027482666060592), (90, 8, 0.0011455526329436391), (100, 8, 0.0013293065842549512)], [(20, 9, 9.941173040646425e-05), (30, 9, 0.00025067868825854564), (40, 9, 0.0004007214838915532), (50, 9, 0.0005464175431402375), (60, 9, 0.0006962104567459651), (70, 9, 0.0008520923135600564), (80, 9, 0.0009948594787347767), (90, 9, 0.0011598030282132452), (100, 9, 0.0013088367202065208)], [(20, 10, 8.361848531217006e-05), (30, 10, 0.0002322785889507875), (40, 10, 0.00037946524112478366), (50, 10, 0.0005349690715471903), (60, 10, 0.0007043880793236362), (70, 10, 0.0008310398725393516), (80, 10, 0.0010168324125573991), (90, 10, 0.0011936824568602236), (100, 10, 0.0012924360860254347)]]
x, y, z = points_to_2darrays(hash_quad_points, 100, 10, 10)
ax.scatter(x, y, z)

figure = plot.figure('Hash RK')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
hash_rk_points = [[(20, 1, 2.764646200057471e-05), (30, 1, 4.734864402558951e-05), (40, 1, 6.661448308621431e-05), (50, 1, 8.411804274544225e-05), (60, 1, 0.00010090703345937672), (70, 1, 0.0001230152489627219), (80, 1, 0.00014164648554625467), (90, 1, 0.0001553233272715628), (100, 1, 0.00017549856653753317)], [(20, 2, 2.9950189728516978e-05), (30, 2, 4.957266871677764e-05), (40, 2, 7.146253130063354e-05), (50, 2, 9.516617683784765e-05), (60, 2, 0.00011567149794296401), (70, 2, 0.00013453515450464123), (80, 2, 0.000156775863932254), (90, 2, 0.00017675837282100457), (100, 2, 0.00019823011321088937)], [(20, 3, 2.8072479727130475e-05), (30, 3, 4.847539777908222e-05), (40, 3, 7.096043756350595e-05), (50, 3, 9.011545895845457e-05), (60, 3, 0.0001101188603557255), (70, 3, 0.00013039387833957856), (80, 3, 0.00015159076140221442), (90, 3, 0.0001710363347343205), (100, 3, 0.00019132860303037086)], [(20, 4, 2.6478900694552937e-05), (30, 4, 4.664860039113838e-05), (40, 4, 6.676929470349958e-05), (50, 4, 8.69947504347832e-05), (60, 4, 0.00010911809894690723), (70, 4, 0.0001313213715933991), (80, 4, 0.00015157201858070218), (90, 4, 0.00017164541790016283), (100, 4, 0.00019239284367308443)], [(20, 5, 2.571030810199601e-05), (30, 5, 4.601228248179786e-05), (40, 5, 6.599004875635437e-05), (50, 5, 8.596160426403715e-05), (60, 5, 0.00010609703622028664), (70, 5, 0.00012645907658094578), (80, 5, 0.00014637893160648476), (90, 5, 0.00016681603190354106), (100, 5, 0.00018705559440463306)], [(20, 6, 2.517775784681674e-05), (30, 6, 4.536868317252261e-05), (40, 6, 6.803383973634768e-05), (50, 6, 8.823305473587006e-05), (60, 6, 0.0001083529552468921), (70, 6, 0.00012864469489860803), (80, 6, 0.00015482277651075296), (90, 6, 0.00017603785078102184), (100, 6, 0.000200559577796017)], [(20, 7, 0.00012847551993810222), (30, 7, 0.00027777197693827486), (40, 7, 0.0004286255226278365), (50, 7, 0.0005705845514166341), (60, 7, 0.0007195769249327785), (70, 7, 0.000859678711921491), (80, 7, 0.001025459352682682), (90, 7, 0.0011724805066344935), (100, 7, 0.001307101193301468)], [(20, 8, 0.0001155579125735985), (30, 8, 0.00026425994229911073), (40, 8, 0.0004165160119341884), (50, 8, 0.0005758783330827973), (60, 8, 0.0007218085714527153), (70, 8, 0.0008564859428661782), (80, 8, 0.001020477133154634), (90, 8, 0.001169828762598001), (100, 8, 0.0012986295292561334)], [(20, 9, 0.00010151670382729886), (30, 9, 0.00024989930594839703), (40, 9, 0.0004039085092980477), (50, 9, 0.0005434535683310778), (60, 9, 0.0006935243253354673), (70, 9, 0.0008543192945568767), (80, 9, 0.0010142911312191985), (90, 9, 0.0011713560921194307), (100, 9, 0.0012826840488278136)], [(20, 10, 8.789224060655647e-05), (30, 10, 0.0002325632048384068), (40, 10, 0.00037905042692407755), (50, 10, 0.0005343306288589765), (60, 10, 0.000673629423623444), (70, 10, 0.0008220894078638327), (80, 10, 0.0009889099182504597), (90, 10, 0.001152406136194865), (100, 10, 0.001280175315009223)]]
x, y, z = points_to_2darrays(hash_rk_points, 100, 10, 10)
ax.scatter(x, y, z)

figure = plot.figure('Automate')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
automate_points = [[(20, 1, 1.3674674086867801e-05), (30, 1, 1.691930853187246e-05), (40, 1, 2.0150501337404914e-05), (50, 1, 2.2444246003020618e-05), (60, 1, 2.549155141751851e-05), (70, 1, 2.8154940388219892e-05), (80, 1, 3.076238872216885e-05), (90, 1, 3.370957413166536e-05), (100, 1, 3.635141135316193e-05)], [(20, 2, 1.519122453249788e-05), (30, 2, 1.7803666988680313e-05), (40, 2, 2.0505014849064355e-05), (50, 2, 2.3836512897221758e-05), (60, 2, 2.6408559833245688e-05), (70, 2, 2.9142274629105796e-05), (80, 2, 3.1639396913904474e-05), (90, 2, 3.434127485248404e-05), (100, 2, 3.6831028371806586e-05)], [(20, 3, 1.7625997835427165e-05), (30, 3, 2.0390598537303487e-05), (40, 3, 2.338830046236754e-05), (50, 3, 2.6231104717432974e-05), (60, 3, 2.909047163127105e-05), (70, 3, 3.2038586744694376e-05), (80, 3, 3.5148211233757844e-05), (90, 3, 3.825131863205376e-05), (100, 3, 4.169333237724528e-05)], [(20, 4, 2.011252521652863e-05), (30, 4, 2.3454065131405792e-05), (40, 4, 2.6534287524435332e-05), (50, 4, 2.9733329280432136e-05), (60, 4, 3.288485535729889e-05), (70, 4, 3.6140935286375165e-05), (80, 4, 3.9108393828540254e-05), (90, 4, 4.245929844621172e-05), (100, 4, 4.6447897094913584e-05)], [(20, 5, 2.358369029737646e-05), (30, 5, 2.702466693505933e-05), (40, 5, 3.0203397081751383e-05), (50, 5, 3.353003727161606e-05), (60, 5, 3.7171828560064844e-05), (70, 5, 4.008242916502681e-05), (80, 5, 4.4175403868072275e-05), (90, 5, 4.769503861764272e-05), (100, 5, 5.114307816056633e-05)], [(20, 6, 2.715483253838428e-05), (30, 6, 3.0239795060066736e-05), (40, 6, 3.339061848762875e-05), (50, 6, 3.667900362037774e-05), (60, 6, 4.004689139238434e-05), (70, 6, 4.361544685930195e-05), (80, 6, 4.667771513212841e-05), (90, 6, 4.997427188005284e-05), (100, 6, 5.3170416310522514e-05)], [(20, 7, 3.147575610145859e-05), (30, 7, 3.5219913116744925e-05), (40, 7, 3.837854028258766e-05), (50, 7, 4.236662434369087e-05), (60, 7, 4.638814204187813e-05), (70, 7, 4.9218758636979715e-05), (80, 7, 5.229139030599297e-05), (90, 7, 5.524728492131322e-05), (100, 7, 5.79551153559584e-05)], [(20, 8, 3.497776049396882e-05), (30, 8, 3.862625639253271e-05), (40, 8, 4.143655077539005e-05), (50, 8, 4.455135636993166e-05), (60, 8, 4.784821058637016e-05), (70, 8, 5.141678511212566e-05), (80, 8, 5.4663256251533856e-05), (90, 8, 5.744287295704876e-05), (100, 8, 6.073770600997092e-05)], [(20, 9, 4.072286550839627e-05), (30, 9, 4.533534868208728e-05), (40, 9, 4.898369256479858e-05), (50, 9, 5.270800322851867e-05), (60, 9, 5.6046309610691094e-05), (70, 9, 5.9569529518949486e-05), (80, 9, 6.34127209448442e-05), (90, 9, 6.70327643960175e-05), (100, 9, 7.038021830189017e-05)], [(20, 10, 4.517825684551149e-05), (30, 10, 4.8690279368647685e-05), (40, 10, 5.260959980145809e-05), (50, 10, 5.622650945416377e-05), (60, 10, 5.999458947681009e-05), (70, 10, 6.360428935683989e-05), (80, 10, 6.729690324336892e-05), (90, 10, 7.085075502383101e-05), (100, 10, 7.519962754570953e-05)]]
x, y, z = points_to_2darrays(automate_points, 100, 10, 10)
ax.scatter(x, y, z)

figure = plot.figure('Boyer Moore')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
# bm_points = [[(20, 1, 4.028074987241318e-05), (30, 1, 5.568177980482273e-05), (40, 1, 7.153601651419888e-05), (50, 1, 8.720830348488674e-05), (60, 1, 0.00010149717187680918), (70, 1, 0.00011634505437519736), (80, 1, 0.00013171886914963108), (90, 1, 0.00014709683324413243), (100, 1, 0.00016247005256381046)], [(20, 2, 4.2469317031287476e-05), (30, 2, 5.017022603512451e-05), (40, 2, 5.83139327114234e-05), (50, 2, 6.63379575811327e-05), (60, 2, 7.386112609716337e-05), (70, 2, 8.164744355489926e-05), (80, 2, 8.909744460024599e-05), (90, 2, 9.69498410397177e-05), (100, 2, 0.00010525932430973171)], [(20, 3, 5.702738720565873e-05), (30, 3, 6.321684831578926e-05), (40, 3, 6.95421144880664e-05), (50, 3, 7.600311582982876e-05), (60, 3, 8.210401319989216e-05), (70, 3, 8.855850741587507e-05), (80, 3, 9.293727797521054e-05), (90, 3, 0.00010096085838097955), (100, 3, 0.00010586204715608731)], [(20, 4, 7.508949389040302e-05), (30, 4, 8.035663979502913e-05), (40, 4, 8.337994180280582e-05), (50, 4, 8.832261058115807e-05), (60, 4, 9.259699865565204e-05), (70, 4, 9.57325289875423e-05), (80, 4, 0.00010056260132974066), (90, 4, 0.00010512264617682533), (100, 4, 0.00011128937970100851)], [(20, 5, 9.70268416634518e-05), (30, 5, 0.00010399450564779819), (40, 5, 0.00010698646710274866), (50, 5, 0.000110209520313885), (60, 5, 0.00011355624491870966), (70, 5, 0.0001201023814051545), (80, 5, 0.00012332735470628646), (90, 5, 0.00012777711209453725), (100, 5, 0.0001312491378227432)], [(20, 6, 0.00012552473441351138), (30, 6, 0.000128851004244626), (40, 6, 0.00013267199198404949), (50, 6, 0.00013656211918964593), (60, 6, 0.0001390330096806419), (70, 6, 0.00014155808482339323), (80, 6, 0.00014558071708870178), (90, 6, 0.00014655514285023444), (100, 6, 0.00014969368534466554)], [(20, 7, 0.00016094579230718472), (30, 7, 0.00016192659621930305), (40, 7, 0.00016547462431456753), (50, 7, 0.0001672704236925776), (60, 7, 0.0001708108702559898), (70, 7, 0.00017172696985598085), (80, 7, 0.00017506325800270892), (90, 7, 0.00018102670552891923), (100, 7, 0.00018301409284452615)], [(20, 8, 0.00019844171801250928), (30, 8, 0.00020122898991251613), (40, 8, 0.00020289295902159758), (50, 8, 0.00020442799347412951), (60, 8, 0.00020641738455592142), (70, 8, 0.00020948744649287583), (80, 8, 0.00021268850213162815), (90, 8, 0.00021803717102522813), (100, 8, 0.00022118969967490747)], [(20, 9, 0.0002541004873535492), (30, 9, 0.0002536951284645373), (40, 9, 0.00025303436779173724), (50, 9, 0.0002551548091305161), (60, 9, 0.0002595383893291633), (70, 9, 0.00026141537066122787), (80, 9, 0.00026303882383215657), (90, 9, 0.0002647681647248233), (100, 9, 0.0002664170128247134)], [(20, 10, 0.00030374495963740155), (30, 10, 0.00030465396886805604), (40, 10, 0.0003058003727623344), (50, 10, 0.0003123742865290836), (60, 10, 0.0003163919490239521), (70, 10, 0.0003191670961795694), (80, 10, 0.0003209992656557579), (90, 10, 0.0003224338600917561), (100, 10, 0.0003261847686767578)]]
x, y, z = points_to_2darrays(bm_points, 100, 10, 10)
ax.scatter(x, y, z)

figure = plot.figure('KMP')
ax = figure.add_subplot(111, projection='3d')
ax.set_xlabel('Text length')
ax.set_ylabel('Pattern length')
ax.set_zlabel('Time in second')
kmp_points = [[(20, 1, 1.1882372303073015e-05), (30, 1, 1.5897710495866863e-05), (40, 1, 1.9792922198826688e-05), (50, 1, 2.3852564400101485e-05), (60, 1, 2.7782407121085243e-05), (70, 1, 3.1446120356496616e-05), (80, 1, 3.531687537000792e-05), (90, 1, 3.986037954440448e-05), (100, 1, 4.3887210479571315e-05)], [(20, 2, 1.2006892202533889e-05), (30, 2, 1.6319169342348003e-05), (40, 2, 2.0048499915211805e-05), (50, 2, 2.3940450721245423e-05), (60, 2, 2.862794098290959e-05), (70, 2, 3.227257225095363e-05), (80, 2, 3.667290868757637e-05), (90, 2, 4.0407945368166265e-05), (100, 2, 4.481711939513557e-05)], [(20, 3, 1.1899836034417714e-05), (30, 3, 1.5731308378135194e-05), (40, 3, 1.9585337229665254e-05), (50, 3, 2.3924496058576303e-05), (60, 3, 2.8699042058934752e-05), (70, 3, 3.25519396266192e-05), (80, 3, 3.6371120029692573e-05), (90, 3, 4.0542293380904984e-05), (100, 3, 4.446631488268719e-05)], [(20, 4, 1.339387886969244e-05), (30, 4, 1.9125407438868093e-05), (40, 4, 2.3307465698603743e-05), (50, 4, 2.7961127611512654e-05), (60, 4, 3.222533184241755e-05), (70, 4, 3.661018264736998e-05), (80, 4, 4.1297676378961514e-05), (90, 4, 4.549154766016756e-05), (100, 4, 5.093632155974042e-05)], [(20, 5, 1.3341188793675903e-05), (30, 5, 1.863445556628969e-05), (40, 5, 2.2422835920484057e-05), (50, 5, 2.6867956823824696e-05), (60, 5, 3.132732488545655e-05), (70, 5, 3.5582188609183514e-05), (80, 5, 3.9329538130923336e-05), (90, 5, 4.414873343584146e-05), (100, 5, 4.793156137174321e-05)], [(20, 6, 1.3922424762462767e-05), (30, 6, 1.8120924722704113e-05), (40, 6, 2.1927444054699175e-05), (50, 6, 2.6339435032152584e-05), (60, 6, 3.188203529086624e-05), (70, 6, 3.693021943908185e-05), (80, 6, 4.077689041973065e-05), (90, 6, 4.5070490479555246e-05), (100, 6, 4.888426302622311e-05)], [(20, 7, 1.3795968807805395e-05), (30, 7, 1.8137862656592437e-05), (40, 7, 2.3358845247591566e-05), (50, 7, 2.7247941294398663e-05), (60, 7, 3.152908357827858e-05), (70, 7, 3.5317626881999673e-05), (80, 7, 3.9111672859067365e-05), (90, 7, 4.297532233933238e-05), (100, 7, 4.6801944453340806e-05)], [(20, 8, 1.4238894383123673e-05), (30, 8, 1.805256760416262e-05), (40, 8, 2.1880515805111382e-05), (50, 8, 2.5529610483269943e-05), (60, 8, 2.9357472052799912e-05), (70, 8, 3.326771454943821e-05), (80, 8, 3.70185669154337e-05), (90, 8, 4.2777095826449044e-05), (100, 8, 4.66796962591291e-05)], [(20, 9, 1.560530820680163e-05), (30, 9, 1.9488127725751078e-05), (40, 9, 2.3744502093827603e-05), (50, 9, 2.7562087192357065e-05), (60, 9, 3.185555110826709e-05), (70, 9, 3.563314524834303e-05), (80, 9, 3.9949090832722386e-05), (90, 9, 4.6239340213408236e-05), (100, 9, 5.003070030364158e-05)], [(20, 10, 1.5549178812777525e-05), (30, 10, 2.0266049427909413e-05), (40, 10, 2.4385924499967044e-05), (50, 10, 2.823705699734281e-05), (60, 10, 3.2056739127520676e-05), (70, 10, 3.591746648198144e-05), (80, 10, 4.0190640075324536e-05), (90, 10, 4.398495932895119e-05), (100, 10, 4.8864977220493326e-05)]]
x, y, z = points_to_2darrays(kmp_points, 100, 10, 10)
ax.scatter(x, y, z)

print(time.time() - a)

plot.show()